/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LearningPath as PrismaLearningPath,
  Progress as PrismaProgress,
  Instructor as PrismaInstructor,
} from "@prisma/client";

export class LearningPathServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LearningPathCountArgs, "select">
  ): Promise<number> {
    return this.prisma.learningPath.count(args);
  }

  async learningPaths(
    args: Prisma.LearningPathFindManyArgs
  ): Promise<PrismaLearningPath[]> {
    return this.prisma.learningPath.findMany(args);
  }
  async learningPath(
    args: Prisma.LearningPathFindUniqueArgs
  ): Promise<PrismaLearningPath | null> {
    return this.prisma.learningPath.findUnique(args);
  }
  async createLearningPath(
    args: Prisma.LearningPathCreateArgs
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.create(args);
  }
  async updateLearningPath(
    args: Prisma.LearningPathUpdateArgs
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.update(args);
  }
  async deleteLearningPath(
    args: Prisma.LearningPathDeleteArgs
  ): Promise<PrismaLearningPath> {
    return this.prisma.learningPath.delete(args);
  }

  async findProgresses(
    parentId: string,
    args: Prisma.ProgressFindManyArgs
  ): Promise<PrismaProgress[]> {
    return this.prisma.learningPath
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .progresses(args);
  }

  async getInstructor(parentId: string): Promise<PrismaInstructor | null> {
    return this.prisma.learningPath
      .findUnique({
        where: { id: parentId },
      })
      .instructor();
  }
}
