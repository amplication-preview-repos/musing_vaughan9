/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReadingStatisticsService } from "../readingStatistics.service";
import { ReadingStatisticsCreateInput } from "./ReadingStatisticsCreateInput";
import { ReadingStatistics } from "./ReadingStatistics";
import { ReadingStatisticsFindManyArgs } from "./ReadingStatisticsFindManyArgs";
import { ReadingStatisticsWhereUniqueInput } from "./ReadingStatisticsWhereUniqueInput";
import { ReadingStatisticsUpdateInput } from "./ReadingStatisticsUpdateInput";

export class ReadingStatisticsControllerBase {
  constructor(protected readonly service: ReadingStatisticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReadingStatistics })
  async createReadingStatistics(
    @common.Body() data: ReadingStatisticsCreateInput
  ): Promise<ReadingStatistics> {
    return await this.service.createReadingStatistics({
      data: {
        ...data,

        learner: data.learner
          ? {
              connect: data.learner,
            }
          : undefined,

        learningResource: data.learningResource
          ? {
              connect: data.learningResource,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        learner: {
          select: {
            id: true,
          },
        },

        learningResource: {
          select: {
            id: true,
          },
        },

        readingTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReadingStatistics] })
  @ApiNestedQuery(ReadingStatisticsFindManyArgs)
  async readingStatisticsItems(
    @common.Req() request: Request
  ): Promise<ReadingStatistics[]> {
    const args = plainToClass(ReadingStatisticsFindManyArgs, request.query);
    return this.service.readingStatisticsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        learner: {
          select: {
            id: true,
          },
        },

        learningResource: {
          select: {
            id: true,
          },
        },

        readingTime: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReadingStatistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async readingStatistics(
    @common.Param() params: ReadingStatisticsWhereUniqueInput
  ): Promise<ReadingStatistics | null> {
    const result = await this.service.readingStatistics({
      where: params,
      select: {
        createdAt: true,
        id: true,

        learner: {
          select: {
            id: true,
          },
        },

        learningResource: {
          select: {
            id: true,
          },
        },

        readingTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReadingStatistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReadingStatistics(
    @common.Param() params: ReadingStatisticsWhereUniqueInput,
    @common.Body() data: ReadingStatisticsUpdateInput
  ): Promise<ReadingStatistics | null> {
    try {
      return await this.service.updateReadingStatistics({
        where: params,
        data: {
          ...data,

          learner: data.learner
            ? {
                connect: data.learner,
              }
            : undefined,

          learningResource: data.learningResource
            ? {
                connect: data.learningResource,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          learner: {
            select: {
              id: true,
            },
          },

          learningResource: {
            select: {
              id: true,
            },
          },

          readingTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReadingStatistics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReadingStatistics(
    @common.Param() params: ReadingStatisticsWhereUniqueInput
  ): Promise<ReadingStatistics | null> {
    try {
      return await this.service.deleteReadingStatistics({
        where: params,
        select: {
          createdAt: true,
          id: true,

          learner: {
            select: {
              id: true,
            },
          },

          learningResource: {
            select: {
              id: true,
            },
          },

          readingTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
