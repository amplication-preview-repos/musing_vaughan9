/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReadingStatistics } from "./ReadingStatistics";
import { ReadingStatisticsCountArgs } from "./ReadingStatisticsCountArgs";
import { ReadingStatisticsFindManyArgs } from "./ReadingStatisticsFindManyArgs";
import { ReadingStatisticsFindUniqueArgs } from "./ReadingStatisticsFindUniqueArgs";
import { CreateReadingStatisticsArgs } from "./CreateReadingStatisticsArgs";
import { UpdateReadingStatisticsArgs } from "./UpdateReadingStatisticsArgs";
import { DeleteReadingStatisticsArgs } from "./DeleteReadingStatisticsArgs";
import { Learner } from "../../learner/base/Learner";
import { LearningResource } from "../../learningResource/base/LearningResource";
import { ReadingStatisticsService } from "../readingStatistics.service";
@graphql.Resolver(() => ReadingStatistics)
export class ReadingStatisticsResolverBase {
  constructor(protected readonly service: ReadingStatisticsService) {}

  async _readingStatisticsItemsMeta(
    @graphql.Args() args: ReadingStatisticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReadingStatistics])
  async readingStatisticsItems(
    @graphql.Args() args: ReadingStatisticsFindManyArgs
  ): Promise<ReadingStatistics[]> {
    return this.service.readingStatisticsItems(args);
  }

  @graphql.Query(() => ReadingStatistics, { nullable: true })
  async readingStatistics(
    @graphql.Args() args: ReadingStatisticsFindUniqueArgs
  ): Promise<ReadingStatistics | null> {
    const result = await this.service.readingStatistics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReadingStatistics)
  async createReadingStatistics(
    @graphql.Args() args: CreateReadingStatisticsArgs
  ): Promise<ReadingStatistics> {
    return await this.service.createReadingStatistics({
      ...args,
      data: {
        ...args.data,

        learner: args.data.learner
          ? {
              connect: args.data.learner,
            }
          : undefined,

        learningResource: args.data.learningResource
          ? {
              connect: args.data.learningResource,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ReadingStatistics)
  async updateReadingStatistics(
    @graphql.Args() args: UpdateReadingStatisticsArgs
  ): Promise<ReadingStatistics | null> {
    try {
      return await this.service.updateReadingStatistics({
        ...args,
        data: {
          ...args.data,

          learner: args.data.learner
            ? {
                connect: args.data.learner,
              }
            : undefined,

          learningResource: args.data.learningResource
            ? {
                connect: args.data.learningResource,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReadingStatistics)
  async deleteReadingStatistics(
    @graphql.Args() args: DeleteReadingStatisticsArgs
  ): Promise<ReadingStatistics | null> {
    try {
      return await this.service.deleteReadingStatistics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Learner, {
    nullable: true,
    name: "learner",
  })
  async getLearner(
    @graphql.Parent() parent: ReadingStatistics
  ): Promise<Learner | null> {
    const result = await this.service.getLearner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => LearningResource, {
    nullable: true,
    name: "learningResource",
  })
  async getLearningResource(
    @graphql.Parent() parent: ReadingStatistics
  ): Promise<LearningResource | null> {
    const result = await this.service.getLearningResource(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
