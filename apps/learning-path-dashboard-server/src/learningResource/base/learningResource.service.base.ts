/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LearningResource as PrismaLearningResource,
  ReadingStatistics as PrismaReadingStatistics,
} from "@prisma/client";

export class LearningResourceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LearningResourceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.learningResource.count(args);
  }

  async learningResources(
    args: Prisma.LearningResourceFindManyArgs
  ): Promise<PrismaLearningResource[]> {
    return this.prisma.learningResource.findMany(args);
  }
  async learningResource(
    args: Prisma.LearningResourceFindUniqueArgs
  ): Promise<PrismaLearningResource | null> {
    return this.prisma.learningResource.findUnique(args);
  }
  async createLearningResource(
    args: Prisma.LearningResourceCreateArgs
  ): Promise<PrismaLearningResource> {
    return this.prisma.learningResource.create(args);
  }
  async updateLearningResource(
    args: Prisma.LearningResourceUpdateArgs
  ): Promise<PrismaLearningResource> {
    return this.prisma.learningResource.update(args);
  }
  async deleteLearningResource(
    args: Prisma.LearningResourceDeleteArgs
  ): Promise<PrismaLearningResource> {
    return this.prisma.learningResource.delete(args);
  }

  async findReadingStatisticsItems(
    parentId: string,
    args: Prisma.ReadingStatisticsFindManyArgs
  ): Promise<PrismaReadingStatistics[]> {
    return this.prisma.learningResource
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .readingStatisticsItems(args);
  }
}
