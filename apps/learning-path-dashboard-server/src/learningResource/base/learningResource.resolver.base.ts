/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LearningResource } from "./LearningResource";
import { LearningResourceCountArgs } from "./LearningResourceCountArgs";
import { LearningResourceFindManyArgs } from "./LearningResourceFindManyArgs";
import { LearningResourceFindUniqueArgs } from "./LearningResourceFindUniqueArgs";
import { CreateLearningResourceArgs } from "./CreateLearningResourceArgs";
import { UpdateLearningResourceArgs } from "./UpdateLearningResourceArgs";
import { DeleteLearningResourceArgs } from "./DeleteLearningResourceArgs";
import { ReadingStatisticsFindManyArgs } from "../../readingStatistics/base/ReadingStatisticsFindManyArgs";
import { ReadingStatistics } from "../../readingStatistics/base/ReadingStatistics";
import { LearningResourceService } from "../learningResource.service";
@graphql.Resolver(() => LearningResource)
export class LearningResourceResolverBase {
  constructor(protected readonly service: LearningResourceService) {}

  async _learningResourcesMeta(
    @graphql.Args() args: LearningResourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LearningResource])
  async learningResources(
    @graphql.Args() args: LearningResourceFindManyArgs
  ): Promise<LearningResource[]> {
    return this.service.learningResources(args);
  }

  @graphql.Query(() => LearningResource, { nullable: true })
  async learningResource(
    @graphql.Args() args: LearningResourceFindUniqueArgs
  ): Promise<LearningResource | null> {
    const result = await this.service.learningResource(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LearningResource)
  async createLearningResource(
    @graphql.Args() args: CreateLearningResourceArgs
  ): Promise<LearningResource> {
    return await this.service.createLearningResource({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LearningResource)
  async updateLearningResource(
    @graphql.Args() args: UpdateLearningResourceArgs
  ): Promise<LearningResource | null> {
    try {
      return await this.service.updateLearningResource({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LearningResource)
  async deleteLearningResource(
    @graphql.Args() args: DeleteLearningResourceArgs
  ): Promise<LearningResource | null> {
    try {
      return await this.service.deleteLearningResource(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ReadingStatistics], {
    name: "readingStatisticsItems",
  })
  async findReadingStatisticsItems(
    @graphql.Parent() parent: LearningResource,
    @graphql.Args() args: ReadingStatisticsFindManyArgs
  ): Promise<ReadingStatistics[]> {
    const results = await this.service.findReadingStatisticsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
