/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Learner as PrismaLearner,
  Progress as PrismaProgress,
  ReadingStatistics as PrismaReadingStatistics,
} from "@prisma/client";

export class LearnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LearnerCountArgs, "select">): Promise<number> {
    return this.prisma.learner.count(args);
  }

  async learners(args: Prisma.LearnerFindManyArgs): Promise<PrismaLearner[]> {
    return this.prisma.learner.findMany(args);
  }
  async learner(
    args: Prisma.LearnerFindUniqueArgs
  ): Promise<PrismaLearner | null> {
    return this.prisma.learner.findUnique(args);
  }
  async createLearner(args: Prisma.LearnerCreateArgs): Promise<PrismaLearner> {
    return this.prisma.learner.create(args);
  }
  async updateLearner(args: Prisma.LearnerUpdateArgs): Promise<PrismaLearner> {
    return this.prisma.learner.update(args);
  }
  async deleteLearner(args: Prisma.LearnerDeleteArgs): Promise<PrismaLearner> {
    return this.prisma.learner.delete(args);
  }

  async findProgresses(
    parentId: string,
    args: Prisma.ProgressFindManyArgs
  ): Promise<PrismaProgress[]> {
    return this.prisma.learner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .progresses(args);
  }

  async findReadingStatisticsItems(
    parentId: string,
    args: Prisma.ReadingStatisticsFindManyArgs
  ): Promise<PrismaReadingStatistics[]> {
    return this.prisma.learner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .readingStatisticsItems(args);
  }
}
