/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Learner } from "./Learner";
import { LearnerCountArgs } from "./LearnerCountArgs";
import { LearnerFindManyArgs } from "./LearnerFindManyArgs";
import { LearnerFindUniqueArgs } from "./LearnerFindUniqueArgs";
import { CreateLearnerArgs } from "./CreateLearnerArgs";
import { UpdateLearnerArgs } from "./UpdateLearnerArgs";
import { DeleteLearnerArgs } from "./DeleteLearnerArgs";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ReadingStatisticsFindManyArgs } from "../../readingStatistics/base/ReadingStatisticsFindManyArgs";
import { ReadingStatistics } from "../../readingStatistics/base/ReadingStatistics";
import { LearnerService } from "../learner.service";
@graphql.Resolver(() => Learner)
export class LearnerResolverBase {
  constructor(protected readonly service: LearnerService) {}

  async _learnersMeta(
    @graphql.Args() args: LearnerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Learner])
  async learners(
    @graphql.Args() args: LearnerFindManyArgs
  ): Promise<Learner[]> {
    return this.service.learners(args);
  }

  @graphql.Query(() => Learner, { nullable: true })
  async learner(
    @graphql.Args() args: LearnerFindUniqueArgs
  ): Promise<Learner | null> {
    const result = await this.service.learner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Learner)
  async createLearner(
    @graphql.Args() args: CreateLearnerArgs
  ): Promise<Learner> {
    return await this.service.createLearner({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Learner)
  async updateLearner(
    @graphql.Args() args: UpdateLearnerArgs
  ): Promise<Learner | null> {
    try {
      return await this.service.updateLearner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Learner)
  async deleteLearner(
    @graphql.Args() args: DeleteLearnerArgs
  ): Promise<Learner | null> {
    try {
      return await this.service.deleteLearner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Progress], { name: "progresses" })
  async findProgresses(
    @graphql.Parent() parent: Learner,
    @graphql.Args() args: ProgressFindManyArgs
  ): Promise<Progress[]> {
    const results = await this.service.findProgresses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ReadingStatistics], {
    name: "readingStatisticsItems",
  })
  async findReadingStatisticsItems(
    @graphql.Parent() parent: Learner,
    @graphql.Args() args: ReadingStatisticsFindManyArgs
  ): Promise<ReadingStatistics[]> {
    const results = await this.service.findReadingStatisticsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
