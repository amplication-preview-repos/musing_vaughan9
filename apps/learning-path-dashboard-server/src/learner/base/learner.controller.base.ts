/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LearnerService } from "../learner.service";
import { LearnerCreateInput } from "./LearnerCreateInput";
import { Learner } from "./Learner";
import { LearnerFindManyArgs } from "./LearnerFindManyArgs";
import { LearnerWhereUniqueInput } from "./LearnerWhereUniqueInput";
import { LearnerUpdateInput } from "./LearnerUpdateInput";
import { ProgressFindManyArgs } from "../../progress/base/ProgressFindManyArgs";
import { Progress } from "../../progress/base/Progress";
import { ProgressWhereUniqueInput } from "../../progress/base/ProgressWhereUniqueInput";
import { ReadingStatisticsFindManyArgs } from "../../readingStatistics/base/ReadingStatisticsFindManyArgs";
import { ReadingStatistics } from "../../readingStatistics/base/ReadingStatistics";
import { ReadingStatisticsWhereUniqueInput } from "../../readingStatistics/base/ReadingStatisticsWhereUniqueInput";

export class LearnerControllerBase {
  constructor(protected readonly service: LearnerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Learner })
  async createLearner(
    @common.Body() data: LearnerCreateInput
  ): Promise<Learner> {
    return await this.service.createLearner({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Learner] })
  @ApiNestedQuery(LearnerFindManyArgs)
  async learners(@common.Req() request: Request): Promise<Learner[]> {
    const args = plainToClass(LearnerFindManyArgs, request.query);
    return this.service.learners({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Learner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async learner(
    @common.Param() params: LearnerWhereUniqueInput
  ): Promise<Learner | null> {
    const result = await this.service.learner({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Learner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLearner(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() data: LearnerUpdateInput
  ): Promise<Learner | null> {
    try {
      return await this.service.updateLearner({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Learner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLearner(
    @common.Param() params: LearnerWhereUniqueInput
  ): Promise<Learner | null> {
    try {
      return await this.service.deleteLearner({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/progresses")
  @ApiNestedQuery(ProgressFindManyArgs)
  async findProgresses(
    @common.Req() request: Request,
    @common.Param() params: LearnerWhereUniqueInput
  ): Promise<Progress[]> {
    const query = plainToClass(ProgressFindManyArgs, request.query);
    const results = await this.service.findProgresses(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        learner: {
          select: {
            id: true,
          },
        },

        learningPath: {
          select: {
            id: true,
          },
        },

        progressPercentage: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/progresses")
  async connectProgresses(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        connect: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/progresses")
  async updateProgresses(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        set: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/progresses")
  async disconnectProgresses(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ProgressWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      progresses: {
        disconnect: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/readingStatisticsItems")
  @ApiNestedQuery(ReadingStatisticsFindManyArgs)
  async findReadingStatisticsItems(
    @common.Req() request: Request,
    @common.Param() params: LearnerWhereUniqueInput
  ): Promise<ReadingStatistics[]> {
    const query = plainToClass(ReadingStatisticsFindManyArgs, request.query);
    const results = await this.service.findReadingStatisticsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        learner: {
          select: {
            id: true,
          },
        },

        learningResource: {
          select: {
            id: true,
          },
        },

        readingTime: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/readingStatisticsItems")
  async connectReadingStatisticsItems(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ReadingStatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      readingStatisticsItems: {
        connect: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/readingStatisticsItems")
  async updateReadingStatisticsItems(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ReadingStatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      readingStatisticsItems: {
        set: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/readingStatisticsItems")
  async disconnectReadingStatisticsItems(
    @common.Param() params: LearnerWhereUniqueInput,
    @common.Body() body: ReadingStatisticsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      readingStatisticsItems: {
        disconnect: body,
      },
    };
    await this.service.updateLearner({
      where: params,
      data,
      select: { id: true },
    });
  }
}
